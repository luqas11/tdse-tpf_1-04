  app.c (app.h)
   Endless loops, which execute tasks with fixed computing time. This 
   sequential execution is only deviated from when an interrupt event occurs.

 app.c primero se encarga de definir todo los paremtros de contadores a cero.
 luego posee una estructura task_cgt_t que es una estructura que posee 2
 funciones y un paremetro.
 Con este tipo de estructura se crea una lista que posee 3 elementos, en los cuales
 posee las funciones de inicializar, actualizar y el valor del parametro
 para cada elemento que realice tareas, estos son el sensor , el actuador y sistema.
 Este tipo de datos esta mas centrado en la configuracion de las tareas.
 
 Posee otra estructura que es la task_dta_t que posee un contador de WCET que nos da
 el peor tiempo de ejecucion este tiene mas como funcion almacenar informacion de
 los procesos.
 
 la funcion app_init posee un contador g_app_cnt que mediante un comando for
 se encarga de recorrer todo el arreglo de task_cfg_list. asi lograr inicializar
 cada tarea y inicializar el contador de WCET en la estrucutra de datos
 
 app_update me diante el chequeo de que el contador g_app_tick_cnt sea mayor que el 
 de inicializado se ejecuten las tareas y decrementar este valor. Al mismo tiempo
 aumentando el contador de las aplicaciones en cada ciclo.
 
 otro comando for parecido al de app_init solo que usando la funcion update
 actualiza todas las aplicaciones, tambien se usa un variable cycle_counter_time_us
 que va almacentando los tiempo de ejecucion de cada ciclo.
 Luego mediante esta variable se le suma a la estrucuta de datos solo si el
 tiempo en realizar la tarea fue mayor al de las tareas previas.
 
 la ultima funcion HAL_SYSTICK_Callback se encarga de incrementr los contadores de 
 tick de todos los elementos del sistema. este incremento es debido a que el main
 usa el app_update en un ciclo de while indefinidamente, por lo cual esta funcion
 se encarga de actualizar estos contadores en cada corrida del while.
...