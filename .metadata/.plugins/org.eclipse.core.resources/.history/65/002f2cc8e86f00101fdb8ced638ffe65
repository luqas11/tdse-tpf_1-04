/*
 * Copyright (c) 2023 Juan Manuel Cruz <jcruz@fi.uba.ar> <jcruz@frba.utn.edu.ar>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * @file   : task_menu.c
 * @date   : Set 26, 2023
 * @author : Juan Manuel Cruz <jcruz@fi.uba.ar> <jcruz@frba.utn.edu.ar>
 * @version	v1.0.0
 */

/********************** inclusions *******************************************/
/* Project includes. */
#include "main.h"
#include <string.h>

/* Demo includes. */
#include "logger.h"
#include "dwt.h"

/* Application & Tasks includes. */
#include "board.h"
#include "app.h"
#include "task_menu_attribute.h"
#include "task_menu_interface.h"
#include "display.h"

/********************** macros and definitions *******************************/
#define G_TASK_MEN_CNT_INI			0ul
#define G_TASK_MEN_TICK_CNT_INI		0ul


#define DEL_MEN_XX_MIN				0ul
#define DEL_MEN_XX_MED				50ul
#define DEL_MEN_XX_MAX				500ul

/********************** internal data declaration ****************************/
task_menu_dta_t task_menu_dta =
	{DEL_MEN_XX_MIN, ST_MEN_XX_MAIN, EV_MEN_OK_IDLE, false, 0, 0};

task_menu_drink_dta_t task_menu_drink_dta_list[] = {
	{0, 0},
	{0, 0},
	{0, 0},
	{0, 0}
};

extern ADC_HandleTypeDef hadc1;
HAL_StatusTypeDef ADC_Poll_Read(uint16_t *value);

#define MENU_DTA_QTY	(sizeof(task_menu_dta)/sizeof(task_menu_dta_t))

/********************** internal functions declaration ***********************/

/********************** internal data definition *****************************/
const char *p_task_menu 		= "Task Menu (Interactive Menu)";
const char *p_task_menu_ 		= "Non-Blocking & Update By Time Code";

/********************** external data declaration ****************************/
uint32_t g_task_menu_cnt;
volatile uint32_t g_task_menu_tick_cnt;

/********************** external functions definition ************************/
HAL_StatusTypeDef ADC_Poll_Read(uint16_t *value) {
	HAL_StatusTypeDef res;

	res=HAL_ADC_Start(&hadc1);
	if ( HAL_OK==res ) {
		res=HAL_ADC_PollForConversion(&hadc1, 0);
		if ( HAL_OK==res ) {
			*value = HAL_ADC_GetValue(&hadc1);
		}
	}
	return res;
}

void task_menu_init(void *parameters)
{
	task_menu_dta_t *p_task_menu_dta;
	task_menu_st_t	state;
	task_menu_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);

	init_queue_event_task_menu();

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_menu_dta = &task_menu_dta;

	/* Print out: Task execution FSM */
	state = p_task_menu_dta->state;
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);

	event = p_task_menu_dta->event;
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);

	b_event = p_task_menu_dta->flag;
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));

	cycle_counter_init();
	cycle_counter_reset();

	displayInit( DISPLAY_CONNECTION_GPIO_4BITS );

	char linea1[32];
	char linea2[32];


	sprintf(linea1, "Stocks: %d,%d,%d,%d",
			task_menu_drink_dta_list[0].stock_value,
			task_menu_drink_dta_list[1].stock_value,
			task_menu_drink_dta_list[2].stock_value,
			task_menu_drink_dta_list[3].stock_value);

	sprintf(linea2, "Precios: %d,%d,%d,%d",
			task_menu_drink_dta_list[0].price_value,
			task_menu_drink_dta_list[1].price_value,
			task_menu_drink_dta_list[2].price_value,
			task_menu_drink_dta_list[3].price_value);

	displayClear();
    displayCharPositionWrite(0, 0);
	displayStringWrite(linea1);
    displayCharPositionWrite(0, 1);
	displayStringWrite(linea2);



	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
}

void task_menu_update(void *parameters)
{
	task_menu_drink_dta_t *p_task_menu_drink_dta;
	task_menu_dta_t *p_task_menu_dta;
	bool b_time_update_required = false;

	/* Update Task Menu Counter */
	g_task_menu_cnt++;

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
    {
    	g_task_menu_tick_cnt--;
    	b_time_update_required = true;
    }
    __asm("CPSIE i");	/* enable interrupts*/

    while (b_time_update_required)
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
		{
			g_task_menu_tick_cnt--;
			b_time_update_required = true;
		}
		else
		{
			b_time_update_required = false;
		}
		__asm("CPSIE i");	/* enable interrupts*/

    	/* Update Task Menu Data Pointer */
		p_task_menu_dta = &task_menu_dta;

    	if (DEL_MEN_XX_MIN < p_task_menu_dta->tick)
		{
			p_task_menu_dta->tick--;
		}
		else
		{

			p_task_menu_dta->tick = DEL_MEN_XX_MAX;

			if (true == any_event_task_menu())
			{
				p_task_menu_dta->flag = true;
				p_task_menu_dta->event = get_event_task_menu();
			}

			switch (p_task_menu_dta->state)
			{
				case ST_MEN_XX_MAIN:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_COIN_ACTIVE == p_task_menu_dta->event)){

						uint16_t value;
						if (HAL_OK==ADC_Poll_Read(&value)) {
							LOGGER_LOG("%u\n", value * 80);
						}

					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER1_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						p_task_menu_dta->drink_number = 0;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA 1");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER2_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						p_task_menu_dta->drink_number = 1;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA 2");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER3_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						p_task_menu_dta->drink_number = 2;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA 3");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER4_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						p_task_menu_dta->drink_number = 3;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA 4");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");
					}

					break;

				case ST_MEN_XX_STOCK:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESCAPE_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_MAIN;
						char linea1[32];
						char linea2[32];


						sprintf(linea1, "Stocks: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].stock_value,
								task_menu_drink_dta_list[1].stock_value,
								task_menu_drink_dta_list[2].stock_value,
								task_menu_drink_dta_list[3].stock_value);

						sprintf(linea2, "Precios: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].price_value,
								task_menu_drink_dta_list[1].price_value,
								task_menu_drink_dta_list[2].price_value,
								task_menu_drink_dta_list[3].price_value);

						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite(linea1);
					    displayCharPositionWrite(0, 1);
						displayStringWrite(linea2);
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_OK_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_SET_STOCK;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("Stock");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> 0");
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER1_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_PRICE;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA x");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Price");
					}


					break;

				case ST_MEN_XX_SET_STOCK:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESCAPE_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("> BEBIDA x");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");

					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER1_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						displayClear();
						displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
						displayCharPositionWrite(0, 1);


						if(p_task_menu_dta->stock_value == 9 ){
							p_task_menu_dta->stock_value = 0;
						}
						else {
							p_task_menu_dta->stock_value++;
						}

					    displayCharPositionWrite(0, 1);
					    char text_stock[5] = "> ";
					    char stock_str[2];
					    sprintf(stock_str, "%d", p_task_menu_dta->stock_value);
					    strcat(text_stock, stock_str);
						displayStringWrite(text_stock);
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_OK_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_MAIN;
						p_task_menu_drink_dta = &task_menu_drink_dta_list[p_task_menu_dta->drink_number];
						p_task_menu_drink_dta->stock_value = p_task_menu_dta->stock_value;
						p_task_menu_dta->stock_value = 0;

						char linea1[32];
						char linea2[32];


						sprintf(linea1, "Stocks: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].stock_value,
								task_menu_drink_dta_list[1].stock_value,
								task_menu_drink_dta_list[2].stock_value,
								task_menu_drink_dta_list[3].stock_value);

						sprintf(linea2, "Precios: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].price_value,
								task_menu_drink_dta_list[1].price_value,
								task_menu_drink_dta_list[2].price_value,
								task_menu_drink_dta_list[3].price_value);
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite(linea1);
					    displayCharPositionWrite(0, 1);
						displayStringWrite(linea2);
					}

					break;

				case ST_MEN_XX_PRICE:


					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER1_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_STOCK;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Stock");
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESCAPE_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_DRINK;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
					    displayCharPositionWrite(0, 1);
					    char text_drink[20] = "> BEBIDA ";
					    char drinkStr[12];
					    sprintf(drinkStr, "%d", p_task_menu_dta->drink_number + 1);
					    strcat(text_drink,drinkStr);
						displayStringWrite(text_drink);
					}
					if ((true == p_task_menu_dta->flag) && (EV_MEN_OK_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_SET_PRICE;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> 0");
					}



					break;


				case ST_MEN_XX_SET_PRICE:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ESCAPE_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_PRICE;
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
					    displayCharPositionWrite(0, 1);
						displayStringWrite("> Precio");

					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENTER1_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						displayClear();
						displayCharPositionWrite(0, 0);
						displayStringWrite("ENTER/ NEXT/ ESCAPE");
						displayCharPositionWrite(0, 1);

						if(p_task_menu_dta->price_value == 9 ){
							p_task_menu_dta->price_value = 0;
						}
						else {
							p_task_menu_dta->price_value++;
						}

					    char text_price[5] = "> ";
					    char price_str[2];
					    sprintf(price_str, "%d", p_task_menu_dta->price_value);
					    strcat(text_price, price_str);
						displayStringWrite(text_price);
					}

					if ((true == p_task_menu_dta->flag) && (EV_MEN_OK_ACTIVE == p_task_menu_dta->event))
					{
						p_task_menu_dta->flag = false;
						p_task_menu_dta->state = ST_MEN_XX_MAIN;
						p_task_menu_drink_dta = &task_menu_drink_dta_list[p_task_menu_dta->drink_number];
						p_task_menu_drink_dta->price_value = p_task_menu_dta->price_value;
						p_task_menu_dta->price_value = 0;

						char linea1[32];
						char linea2[32];


						sprintf(linea1, "Stocks: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].stock_value,
								task_menu_drink_dta_list[1].stock_value,
								task_menu_drink_dta_list[2].stock_value,
								task_menu_drink_dta_list[3].stock_value);

						sprintf(linea2, "Precios: %d,%d,%d,%d",
								task_menu_drink_dta_list[0].price_value,
								task_menu_drink_dta_list[1].price_value,
								task_menu_drink_dta_list[2].price_value,
								task_menu_drink_dta_list[3].price_value);
						displayClear();
					    displayCharPositionWrite(0, 0);
						displayStringWrite(linea1);
					    displayCharPositionWrite(0, 1);
						displayStringWrite(linea2);
					}

					break;

				default:

					p_task_menu_dta->tick  = DEL_MEN_XX_MIN;
					p_task_menu_dta->state = ST_MEN_XX_MAIN;
					p_task_menu_dta->event = EV_MEN_OK_IDLE;
					p_task_menu_dta->flag  = false;

					break;
			}
		}
	}
}

/********************** end of file ******************************************/
